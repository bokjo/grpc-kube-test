// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nzd.proto

package nzd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NZDRequest struct {
	A                    uint64   `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    uint64   `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NZDRequest) Reset()         { *m = NZDRequest{} }
func (m *NZDRequest) String() string { return proto.CompactTextString(m) }
func (*NZDRequest) ProtoMessage()    {}
func (*NZDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nzd_fe9cdb3d188ae3e7, []int{0}
}
func (m *NZDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NZDRequest.Unmarshal(m, b)
}
func (m *NZDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NZDRequest.Marshal(b, m, deterministic)
}
func (dst *NZDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NZDRequest.Merge(dst, src)
}
func (m *NZDRequest) XXX_Size() int {
	return xxx_messageInfo_NZDRequest.Size(m)
}
func (m *NZDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NZDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NZDRequest proto.InternalMessageInfo

func (m *NZDRequest) GetA() uint64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *NZDRequest) GetB() uint64 {
	if m != nil {
		return m.B
	}
	return 0
}

type NZDResponse struct {
	Result               uint64   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NZDResponse) Reset()         { *m = NZDResponse{} }
func (m *NZDResponse) String() string { return proto.CompactTextString(m) }
func (*NZDResponse) ProtoMessage()    {}
func (*NZDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nzd_fe9cdb3d188ae3e7, []int{1}
}
func (m *NZDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NZDResponse.Unmarshal(m, b)
}
func (m *NZDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NZDResponse.Marshal(b, m, deterministic)
}
func (dst *NZDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NZDResponse.Merge(dst, src)
}
func (m *NZDResponse) XXX_Size() int {
	return xxx_messageInfo_NZDResponse.Size(m)
}
func (m *NZDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NZDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NZDResponse proto.InternalMessageInfo

func (m *NZDResponse) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*NZDRequest)(nil), "nzd.NZDRequest")
	proto.RegisterType((*NZDResponse)(nil), "nzd.NZDResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NZDServiceClient is the client API for NZDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NZDServiceClient interface {
	Compute(ctx context.Context, in *NZDRequest, opts ...grpc.CallOption) (*NZDResponse, error)
}

type nZDServiceClient struct {
	cc *grpc.ClientConn
}

func NewNZDServiceClient(cc *grpc.ClientConn) NZDServiceClient {
	return &nZDServiceClient{cc}
}

func (c *nZDServiceClient) Compute(ctx context.Context, in *NZDRequest, opts ...grpc.CallOption) (*NZDResponse, error) {
	out := new(NZDResponse)
	err := c.cc.Invoke(ctx, "/nzd.NZDService/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NZDServiceServer is the server API for NZDService service.
type NZDServiceServer interface {
	Compute(context.Context, *NZDRequest) (*NZDResponse, error)
}

func RegisterNZDServiceServer(s *grpc.Server, srv NZDServiceServer) {
	s.RegisterService(&_NZDService_serviceDesc, srv)
}

func _NZDService_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NZDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NZDServiceServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nzd.NZDService/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NZDServiceServer).Compute(ctx, req.(*NZDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NZDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nzd.NZDService",
	HandlerType: (*NZDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _NZDService_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nzd.proto",
}

func init() { proto.RegisterFile("nzd.proto", fileDescriptor_nzd_fe9cdb3d188ae3e7) }

var fileDescriptor_nzd_fe9cdb3d188ae3e7 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xab, 0x4a, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0xab, 0x4a, 0x51, 0xd2, 0xe0, 0xe2, 0xf2, 0x8b,
	0x72, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe1, 0x62, 0x4c, 0x94, 0x60, 0x54,
	0x60, 0xd4, 0x60, 0x09, 0x62, 0x4c, 0x04, 0xf1, 0x92, 0x24, 0x98, 0x20, 0xbc, 0x24, 0x25, 0x55,
	0x2e, 0x6e, 0xb0, 0xca, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x31, 0x2e, 0xb6, 0xa2, 0xd4,
	0xe2, 0xd2, 0x9c, 0x12, 0xa8, 0x7a, 0x28, 0xcf, 0xc8, 0x06, 0x6c, 0x60, 0x70, 0x6a, 0x51, 0x59,
	0x66, 0x72, 0xaa, 0x90, 0x1e, 0x17, 0xbb, 0x73, 0x7e, 0x6e, 0x41, 0x69, 0x49, 0xaa, 0x10, 0xbf,
	0x1e, 0xc8, 0x6a, 0x84, 0x65, 0x52, 0x02, 0x08, 0x01, 0x88, 0x99, 0x4a, 0x0c, 0x49, 0x6c, 0x60,
	0xa7, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x59, 0xc8, 0xd4, 0x3b, 0xa7, 0x00, 0x00, 0x00,
}
